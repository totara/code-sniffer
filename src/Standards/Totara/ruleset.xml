<?xml version="1.0"?>
<ruleset name="Totara">
    <description>The Totara coding standard.</description>

    <!-- Include compatibility rules -->
    <!-- PHPCompatibility does not support PHP 8 so for now disabling it
         to make sure the Standard can be used without issues on PHP 8 -->
    <!--    <rule ref="PHPCompatibility"/>-->

    <arg name="tab-width" value="4"/>

    <!-- 2. General -->

    <!-- 2.1. Files -->

    <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <severity>0</severity>
    </rule>

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- All PHP files MUST use the Unix LF (linefeed) line ending only. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="PSR2.Files.ClosingTag"/>

    <!-- 2.2 Lines -->

    <!-- There MUST NOT be a hard limit on line length.
    The soft limit on line length MUST be 180 characters.
    Lines SHOULD NOT be longer than 132 characters; lines longer than that SHOULD be split into multiple subsequent lines of no more than 132 characters each. -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="132"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- 2.3 Indenting -->

    <!-- Code MUST use an indent of 4 spaces for each indent level, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
            </property>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- 4 Classes, Properties and Methods -->

    <!-- 4.1 Class declaration/instantiation -->

    <rule ref="Generic.Classes.OpeningBraceSameLine"/>
    <rule ref="Totara.NamingConventions.ValidClassName"/>

    <rule ref="Squiz.CSS.ClassDefinitionOpeningBraceSpace"/>
    <rule ref="Squiz.CSS.ClassDefinitionClosingBraceSpace"/>

    <!-- When instantiating a new class, parenthesis MUST always be present even when there are no arguments passed to the constructor. -->
    <rule ref="PSR12.Classes.ClassInstantiation"/>

    <!-- 4.2 Constants -->

    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- 4.3 Properties-->

    <!-- Visibility MUST be declared on all properties. -->
    <!-- The var keyword MUST NOT be used to declare a property. -->
    <!-- There MUST NOT be more than one property declared per statement. -->
    <!-- Property names MUST NOT be prefixed with a single underscore to indicate protected or private visibility. -->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!-- 4.4 Methods/Functions -->

    <!-- TODO Add spacing rules for function calls and declarations -->

    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Method names MUST NOT be prefixed with a single underscore to indicate protected or private visibility. That is, an underscore prefix explicitly has no meaning. -->
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
        <message>Method name "%s" must not be prefixed with an underscore to indicate visibility</message>
    </rule>

    <rule ref="Totara.NamingConventions.ValidFunctionName"/>

    <!-- Opening brace of a function must be on the same line as the function declaration. -->
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>

    <!-- closing brace of a function goes directly after the body. -->
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>

    <rule ref="Totara.Functions.FunctionDeclaration"/>
    <rule ref="Totara.Functions.FunctionDeclaration.CloseBracketLine">
        <severity>0</severity>
    </rule>
    <rule ref="Totara.Functions.FunctionDeclaration.Indent">
        <severity>0</severity>
    </rule>


    <!-- Additional rule to check function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature"/>
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <!-- 5 Keywords and Types -->

    <!-- All PHP reserved keywords and types [1][2] MUST be in lower case.
    Any new types and keywords added to future PHP versions MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Short form of type keywords MUST be used i.e. bool instead of boolean, int instead of integer etc. -->
    <rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>

    <!-- 6 Variables -->

    <rule ref="Totara.NamingConventions.ValidVariableName"/>

    <!-- 7 Arrays -->

    <!-- 7.1 Wrapping -->

    <rule ref="Generic.Arrays.ArrayIndent"/>

    <!-- 7.2 Separator -->

    <rule ref="Totara.Arrays.ArrayDeclaration"/>


    <!-- 8 Control Structures -->

    <!-- 8.1 if/else if/else-->

    <rule ref="Totara.ControlStructures.ElseIfDeclaration"/>

    <!-- foreach/for/while/trycatch/finally -->

    <!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The closing brace MUST be on the next line after the body
    The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen" />
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose" />
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- exclude this message as it is already checked in Generic.PHP.LowerCaseKeyword -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.AsNotLower">
        <severity>0</severity>
    </rule>

    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>

    <!-- All binary and ternary (but not unary) operators MUST be preceded and followed by at least one space. This includes all arithmetic, comparison, assignment, bitwise, logical (excluding ! which is unary), type operators, trait operators (insteadof and as), and the single pipe operator (e.g. ExceptionType1 | ExceptionType2 $e). -->
    <!-- Other operators are left undefined. -->
    <rule ref="Totara.Operators.OperatorSpacing"/>

</ruleset>
